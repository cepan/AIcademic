{
    "0-20": " welcome back to mining of massive datasets today's topic is recommender systems we're going to start with an overview of recommendation systems and why they are necessary then we are going to look at the two most common types of recommender systems content based systems and collaborative filtering and finally we can look at how to evaluate recommender systems to make sure they're in a good job let's start with an overview imagine any",
    "20-40": " situation where a user interacts with a really large catalog of items now these items could be products at Amazon they could be movies at Netflix they could be music from Pandora's catalogue or it could be you know news items on Google News what really matters is that there are tens of thousands or hundreds of",
    "40-60": " thousands or millions of items a really large catalog and the user is interacting with this catalog now there's two ways in which a user can interact with a large catalog of items the first is search the user knows what they are looking for and they go and they search the catalog for the precise item that they are looking for now when you have a really large catalog of items very often the user doesn't know exactly",
    "60-80": " what they are looking for and this is where recommendations come in the system recommends to the user certain items that they think the user will be interested in based on what they know about the user now why do we really need such recommendations the key that made recommendations so important and a why recommendation system develops so much",
    "80-100": " in the last 10 or 20 years is that we moved from an era of scarcity to an era of abundance what do I mean by this imagine that you are out shopping 20 years ago and you'd go to a local retailer and you'll find a certain number of products on the shelves of the local retailer now even in a very large retailer like like a Walmart for instance shelf space is a key it's a",
    "100-120": " scarce commodity it limits the number of items that a retailer can carry shelf space is expensive because it involves real estate costs and therefore a retailer can carry only a certain number of products now similar situation applies in the case for example of TV networks a TV network can carry only so many shows because there's only so many",
    "120-140": " number of hours in a day and there are only so many movie theaters so they can only serve the screen a certain number of movies now once the internet was developed things changed the web enables zero-cost disseminate of information about products and what this means is that we can have many more products than ever before",
    "140-160": " there is no shelf space limitation on the number of products that's why the number of products on Amazon is much much more than the number of products available at any physical retailer the number of you know movies available on Netflix is more than the number of movies that were ever away available at a blockbuster and so on this new zero",
    "160-180": " cost dissemination of information gives rise to a phenomenon that's called the longtail phenomenon let's examine what this is now imagine a graph where on the x axis we have taken the items in the catalog remember items might be books or music or video or news articles and you've ranked these items by popularity so the",
    "180-200": " most popular items are on the left and as you move towards the right the items become less than less popular what do I mean by popular well I mean the number of times the item is purchased in a week or it could be the number of times a movie is viewed in a week or a month or some some fixed time period now on the y axis we have the actual popularity which",
    "200-220": " in this case I've shown as number of purchases per week it could be number of views per week or it could be number of you know plays per month for for music and so on so in general you have items ranked by popularity along the x-axis and the popularity itself along the y axis now when you take items you know in",
    "220-240": " a large catalog and you rank them and you plot them on this curve you get a curve that looks like this you can see that this curve you know has a very steep fall initially the the you know you have a really really a few really really popular items and then as you move towards the right as the you know as the item rank becomes greater the",
    "240-260": " popularity falls off very steeply but at a certain point you can see that this popularity stops you know you know falls off less and less deeply and you know it never quite reaches the x axis the interesting thing here is that there is a cut-off point beyond you know items that are less popular than this cutoff point you know might be purchase perhaps",
    "260-280": " just to once a week or maybe once a month if you're a physical retailer like a Walmart it's not economic to stock the sytem because the rent cost of stocking the item is more than you make buy when you sell the item and therefore a retailer any right-thinking retailer does not stock items that are unpopular that you",
    "280-300": " know they only stock the head of this distribution so there's this cutoff point that I show on this graph here and items that are more popular than this the the more popular items are available at a retail store but the less popular items the items are to the right of the cutoff point are not available at any retail store they are only available",
    "300-320": " online now this phenomenon applies to books to music to move to videos to news articles for example there are only so many news articles in newspaper but when you go online you can see the rest of the news articles the less popular news articles that are off to the right the piece of the curve that is to the the",
    "320-340": " piece of the curve here that is to the right of this dividing line is called the long tail these are the items that are available only online the interesting thing is the is this area under the curve here and you can see the area under the curve here is quite significant in fact in some cases area",
    "340-360": " under the curve on the right is about as large or could be even larger than the area of the curve under the curve on the on the left so you have all these items that could now be found in a physical store but there can be only found online but there are so many of them that it's very hard for any user to find all these",
    "360-380": " items right so when you have this area of abundance and you have so many items and many of them are only found online how you know how do you introduce a user to all these new items that they may not otherwise find when you have more choice like this when you have these millions and millions of items that are only available online you need a better way for the user to find all these items the",
    "380-400": " user doesn't even know where to start looking and that's where recommendations engines come in so recommendation Indians book in the case of many many kinds of items books music movies news articles interestingly they even work in the case of people for example when you go to Facebook or LinkedIn or Twitter there are so many people that you do",
    "400-420": " know who to follow a good friend and so Facebook or LinkedIn or Twitter makes recommendations to you on the people that you know that you could follow a friend I led this point with an interesting anecdote that shows you the power of recommendation engines a several years ago a book was published called touching the void it's a book",
    "420-440": " about molten earring it's a very very good book the book came out it didn't make much of a ripple you know a few people bought the book it got some decent reviews but it never became a best-seller and then a few years after touching the void a new book was published on mountaineering called into thin air now into the net effect of traction and lots of people started",
    "440-460": " buying into thin air Amazon noticed that a few of the people who bought into thin air had also bought touching the void so they started recommending touching the void to people who bought into thin air and lo and behold those people started buying touching the wide as well the interesting point is this may touching the void a best-seller in fact",
    "460-480": " it became a bigger bestseller even than into thin air even though a few years ago a debt sank without a trace so this example should show you the power of recommendation systems there are these items these sort of gems like touching the void know that people don't know because they don't know to look for them but a good recommendation system can",
    "480-500": " expose people to these hidden gems that they wouldn't have known about otherwise so let's look at types of recommendation systems the simplest and the oldest kind of recommendation is editorial or hand curated you might find a list of favorite for example when you go into your favorite neighborhood book store",
    "500-520": " you might find staff picks certain books are marked off as topics right and these are editorial our hand curated and on certain websites you'll see a list of staff favorites or you'll see a list of essential items these are essentially built by hand and another place where you will see these editorial recommendations is often on the home",
    "520-540": " pages of websites for example if you go to the the home page of most popular websites including product websites you'll see editorial pick these are products that have been picked by the rhetorical staff too feature on the home page the drawback with editorial or hand curated recommendations is that it's done",
    "540-560": " entirely by you know by the staff of the website and there is no input from the users of the site so when you go beyond editorial recommendations the next simple thing that you can do is simple aggregates on many websites you'll see a list of top ten or most popular or most recent for example if you go to youtube",
    "560-580": " you can see the most popular videos for instance right so these are simple aggregates which sort of take into account user activity to make recommendations to other users but these recommendations don't depend on the user they only depend on you know the aggregate activity of a lot of other users the third and most interesting",
    "580-600": " kind of recommendation to us is recommendations that are tailored to individual users right for example book recommendations tailored to your tastes or movie recommendation based on the movies that you watch previously or music recommendation based on your music interests and this is our focus here",
    "600-620": " recommendations that are tailored to individual users so let's look at a formal model let C be a set of customers and s a set of items we go to create a function called a utility function or a utility matrix the utility function is a",
    "620-640": " function that looks at every pair of customer and item and maps it to a rating okay our in this case is a set of ratings and for example R could be a star rating from 1 star to 5 star or R",
    "640-660": " could be a number between 0 and 10 in general R is a totally ordered set so that you know a lower value indicates that the user liked the product less and a higher value indicates that the user liked the product more let's look at an example of a utility matrix now on the",
    "660-680": " top we have 4 movies here but are a lot of the rings' matrix and Pirates of the Caribbean and down here we have 4 users a lesbo Carolyn David and the utility matrix gives you ratings for certain movies and certain users for example Alice has rated avatar and matrix but not Lord of the Rings or Pirates of the Caribbean",
    "680-700": " whereas carol has rated you know has rated the same two movies Bob has rated a lot of the Rings and Pirates but hasn't rated avatar no or matrix now it could be that these users have not seen these movies or it could be that they have seen the movies but not bother to rate them so in general utility matrix",
    "700-720": " like this is going to be sparse you know most of the users haven't seen most of the movies and there are going to be values in some of the you know some of the locations the key problem in recommendation systems is to figure out these unknown values for example you've seen that Alice has rated avatar and",
    "720-740": " matrix but hasn't rated Lord of the Rings so the question is can we figure out what Alice's rating for a lot of the Rings will be based on her other ratings can you figure out whether she'd like pirates or not right so this is the key problem for recommender systems once we",
    "740-760": " find out for each user certain movies that they would have rated highly or with the system thinks they might have rated highly then we can recommend those movies to those users so there are three key problems in the space of recommender systems the first is gathering the known ratings ratings in the matrix now in the",
    "760-780": " previous slide when you look at the utility matrix it was already filled in with certain values but how do you get a gather those values in the first place so that's the key that the first problem that you need to tackle the second problem is to extrapolate unknown rating from known ratings but we are mainly",
    "780-800": " interested in the high unknown ratings we're interested in those ratings where a user would have given a high rating to a movie we're not interested in the average or the low ratings because they never going to recommend those movies to the user and finally the third key problem is evaluate extrapolation methods once you have a recommendation",
    "800-820": " system that can extrapolate unknown ratings from known ratings how do you know that the recommender system is doing well this very except you know the evaluation methodologies come in let's start with the first problem that of gathering datings the first and simplest way of gathering ratings is is what what I will call explicit method simply ask people",
    "820-840": " to rate items now this method is good because the you know you're asking people to directly rate items and you're going to get you know but and you can decide on what scale people are going to rate item for example you can say you can ask for ratings on a one to five star scale or you can ask people to rate",
    "840-860": " on a scale from zero to ten or you can just ask people to say whether they liked an item or did not like it so the explicit method has the advantage of simplicity and of getting direct responses from users the problem though is that it doesn't scale only a small fraction of users who viewed a movie or",
    "860-880": " listen to a you know piece of music or bought a product actually bother to leave a rating or review most users don't actually leave ratings or reviews so while the data that explicitly gathered excellent data it it's not sufficient in most cases for recommendations because only a small fraction of users actually leave ratings",
    "880-900": " and reviews since explicit ratings don't scale lot of sites use implicit ratings now the idea behind implicit ratings is to learn ratings from other user action for example an online shopping website might have a rule that a purchase implies a high rating now the nice thing",
    "900-920": " about implicit ratings is that they're much more scalable than explicit ratings because the user doesn't have to explicitly rate an item and there are way more other actions such as purchases then there are ratings the problem though is that it's very hard using implicit ratings to learn low ratings",
    "920-940": " it's quite easy to learn high ratings because you might have a rule that purchase implies a high rating but you can never learn a rating that a user disliked a product implicitly in practice most recommender systems and most websites use a combination of explicit or implicit ratings where",
    "940-960": " explicitly ratings are available they use them but they supplement them with implicit ratings when needed let's move on now to the central problem of extrapolating utilities or extrapolating unknown utilities from known utility values the key or central problem that",
    "960-980": " we have to surmount to extrapolate utilities where the matrix U the utility matrix is very very sparse most people have not related most items and this introduces a slew of problems that will come across shortly the second problem we have is a cold start problem when you have a new item",
    "980-1000": " or a new user the new item doesn't have any ratings and new users have no history so this is known as a cold start problem and we had a tackle this problem as well in due course there are three approaches to building recommendation systems the first is content-based",
    "1000-1020": " recommendations the second is collaborative filtering and the third is latent factor based models let's start with content-based based approaches"
}