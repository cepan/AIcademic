{
    "0-20": " hello everyone welcome back to mining of massive datasets we're going to continue our discussion of the AdWords problem with a look at the Madam's algorithm the balanced algorithm is a way to deal with the problem of limited advertiser budgets in the context of the AdWords problem proficient memory on what the AdWords problem is we are given a set of bids by",
    "20-40": " advertisers for search queries and a click-through rate for each advertiser query pair and in addition a budget for each advertiser the budget could be for a day or a month or a year or some period like the sentence assume that it's a daily budget now finally there is a limit on the number of ads to be displayed with each search query this limit could be one or two or three now",
    "40-60": " we need to respond to each search query with a set of advertisers such that the size of the advertiser set is no larger than the limit of the number of ads per query each advertiser who we show has actually bid on the search query and finally if the ad is shown and somebody",
    "60-80": " clicks on the ad then the advertiser should have enough budget left over to pay for the ad it when it's actually clicked upon so we don't actually want to show ads from advertisers who don't have a budget to pay for the clicks if they do actually happen because that's not bidding proposition for us so the question is how do we deal with the this issue of limited advertiser budget that",
    "80-100": " we don't want to show or cannot show an ad from an advertiser whose budget has been exhausted now let's first study the problem in in a simplified version the simplified version that they're going to look at has only one ad shown for each query and all advertisers have the same budget B we're also going to assume that",
    "100-120": " all ads are equally likely to be clicked and all has the same value of one another way of thinking about this you said expected revenue from each ad which is a product of the click-through rate and the bed is equal to one now the simplest algorithm is the greedy algorithm which we've already looked at and the greedy algorithm picks any advertiser who has been one for a query",
    "120-140": " when that query shows up and it's easy to show that the competitive ratio of the greedy algorithm is actually 1/2 but here's a bad scenario for the greedy algorithm 300 to advertisers a and B and let's say a bids on KX b bids on queries x and y and both have budgets of",
    "140-160": " $4 now the query stream that comes in is xx xx YY YY that's 4x s followed by four wise now when these query queries come in the greedy algorithm and it sees the first X and notices that we have both a and B who are bid for Quake X and let's",
    "160-180": " say really algorithm arbitrarily assigns query one to two advertiser B and then the second X comes in and let's say the greedy algorithm assigns that to be as well and so on the greedy algorithm might for instance end up assigning all the first four X queries to advertiser B",
    "180-200": " man 2 advertiser a as a result when the first y query comes in this budget of $4 is already exhausted and therefore no ads can be shown for the white queries as a result the vd algorithms revenue is is for is only $4 well it's the optimal allocation in this case as it's easy to see is to show a sad for the first four",
    "200-220": " queries and then be sad for the next four queries and that's the optimal choice and the optimal algorithm has a revenue of in dollars which is twice the greedy algorithm and this is the worst case example that shows that the greedy algorithm can do half as well as the optimal algorithm now it's it's actually",
    "220-240": " quite easy and straightforward to prove that the greedy algorithm cannot do worse than then this and the competitive ratio of the greedy algorithm is exactly half and the proof of it is quite similar to the the proof in the case of the online bipartite graph matching problem which we covered in an earlier lecture and I leave that to you as an",
    "240-260": " exercise the question is is there an algorithm that has a competitive ratio of better than 1/2 for this problem and it turns out that there is and it's a very simple algorithm called the balanced algorithm and the balanced algorithm uses a very simple heuristic for each query it assigns that query to",
    "260-280": " the advertiser with the largest unspent budget or the largest balance hence the name the algorithm if there's a tie for example if there's a query and there are two advertisers each of whom have an equal balance then the balance algorithm breaks ties arbitrarily but in a deterministic manner let's look at how",
    "280-300": " the balance algorithm deals with the example that we just saw so here here again is our example there are two advertisers a and B a bids on query X and B bids on queries x and y and both our budgets are $4 now when the first query x comes in the balance algorithm you know both both a and B are eligible",
    "300-320": " to be shown for this query and both have an equal balance of 4 and the balance algorithm has to break the strike arbitrarily let us say the the balance algorithm assigns this the first query to a now the second X comes in and now notice that let's write down is and B's",
    "320-340": " imbalances right there notice now that ace balance is is 3 and these Palance is 4 because $1 of ACE budget is already spent when we showed the the first add and so the algorithm assigns the second",
    "340-360": " X to the advertiser with eligible advertiser with the largest balance which is me in this case and so that goes to B and B's balance now becomes 3 now when the third X comes in both advertisers are eligible and once again both Balthasar equal the balance algorithm has to break the tie arbitrarily and let's say B it gives it to a when the fourth X comes in once",
    "360-380": " again it goes to B since it has larger balance now when the first y comes in the only eligible advertiser is B a has not bid for a query y and so the query has to go to B and B's balance goes down to 1 and when the next y comes in it",
    "380-400": " once again has to be and beasts balance goes down to 0 and when the last two y's come in there is no led by advertiser so we end up not assigning those queries to any advertiser or in fact not showing any query for for those searches so as a result the the balance algorithm",
    "400-420": " has a revenue of $6 because we show six ads you know in the balance algorithm the optimal algorithm actually called has a revenue of eight dollars and so the the competitive ratio in this case is six by eight which is three phones",
    "420-440": " which is better than 1/2 right so and so that's exactly what what happens here the that's a balancer in the optimal choice and the competitive ratio is three forced and in fact it can be shown that for balance with two advertisers",
    "440-460": " the competitive ratio is in fact exactly three votes we can do no worse than a competitive ratio of three forts in this case and the proof is quite quite simple but quite interesting so I'll walk you through it so let's analyze the two advertiser balance scenario let's",
    "460-480": " consider a very simple scenario where there are two advertisers a 1 and a 2 both with budget B and let's assume that the optimal solution exhausts both advertisers budget you know in other words the optimal solution has revenue to be because it it allocates a beep amount of budget from a 1 and a B amount",
    "480-500": " of budget from a 2 now it must be the case that the balance algorithm exhausts at least to one advertisers budget because suppose the balance add algorithm did not exhaust at least one advertisers budget then when a quake um Xin both advertisers are eligible and at least one of those advertisers can be can be shown for that query and",
    "500-520": " therefore it could do a bit better so it must be the case that the balance algorithm must exhaust the budget of at least one advertiser now assume without loss of generality that balance actually exhausts a to s budget but doesn't exhaust a one's budget let's look at the",
    "520-540": " simple visual to help us understand what's going on here and let's say let's let's assume that these that the these two rectangles represent sets of queries in this case the blue queries are the queries that were allocated to advertiser a1 in the",
    "540-560": " optimal solution and the green rectangle represents the set of queries that were assigned to advertiser a2 in the optimal solution remember that the that there are B queries of each kind since we exhausted both a once budget and hey Tues budget and so there were total of 2 B queries that were allocated by the",
    "560-580": " optimal solution ok and this is the optimal solution now let's look at the what happens when we run the are the balanced algorithm we run the balanced algorithm the balanced algorithm would want assigned queries in exactly the same way as the optimal solution let's say that some of the blue queries that were assigned to a 1 in the optimal",
    "580-600": " solution remain assigned to a 1 in the balanced solution but some of the blue queries are instead assigned to a 2 in the balanced ocean and some of the the green queries that were assigned to a to the main assigned to a 2 but the some of the green queries that were were originally assigned to a 2 could not be",
    "600-620": " assigned and I in fact left and assigned by the balance algorithm ok and in fact the the revenue of the balanced algorithm is equal to B which is the set of queries that are assigned to a to remember since exhaustion a to s budget plus y the set of query that that were assigned to a 1 all right so the optimal",
    "620-640": " revenue in this case is 2 B since we since the optimal algorithm has assigned B queries to a 1 and we queries to a 2 so it's 7 years to me the balance revenue is B plus y since it since a balanced algorithm assigns B queries to a 2 and Y queries to a 1 and leaves X",
    "640-660": " queries unassigned ok now what we're going to show is that we're going to show that Y is greater than or equal to B by 2 why are we going to show that well then once we show that Y is greater than or equal to B by 2 then we know that the balance revenue is at least B plus B by 2 which is 3/4 of the optimal",
    "660-680": " revenue ok let's let's consider two cases case 1 is when the balance algorithm assigns at least half or B by two queries of the blue queries to a-1 okay so when if the balance algorithm assigns at least B by",
    "680-700": " two of blue queries to a 1 then we know that the the site of the blue bar is at least B by two and so y is greater than or equal to B by two and we've shown Y is greater than or equal to B by two which is what we wanted to show in the first place now the second case to",
    "700-720": " consider is that the balance algorithm assigns less than me by two blue face 2 to a 1 and therefore since there are total of be blue queries that assigned it must assign more than V by 2 blue queries to a 2 now when more than B by 2",
    "720-740": " blue police are assigned to a - just look at let's consider the last blue query the query right here the last blue query that was assigned to 2a - ok so when you look at the last blue query there that was assigned to a to the balance algorithm remember both a1 and",
    "740-760": " a2 are eligible and have bid on the blue queries and but the balance target and booth at this point have unspent budget but the balance algorithm decided to assign this blue query to a to remember the heuristic of the balance algorithm the balance algorithm assigns the query to the advertiser with the larger and",
    "760-780": " spend balance so at this point when the blue query was assigned to a 2 it must be the case that 8 a 2 balance was larger than a one's balance this is just another way of saying that at this point the number of players assigned a one",
    "780-800": " must have been greater than the number of queries that were assigned to a 2 since both started out to the same budget in the beginning now we know that at least big this is the you know actually the blue queries have already been assigned to me by 2 blueberries have already been assigned to a 2 at",
    "800-820": " this point right and since we've said that the number of queries assigned a 1 at this point has to be greater than the number of queries that is assigned to a 2 at this point it must be the case that the number of queries assigned to a 1 at this point which is y is also greater than or equal to B by 2 and so we've",
    "820-840": " shown that Y is greater than or equal to B by 2 in the second case as well now since we've shown that Y is greater than or equal to B by 2 and we've also we also know that the balance revenue is B plus y since Y is greater than or equal to B by 2 we know that the balance revenues is at Lee is greater than or",
    "840-860": " equal to 3 B by 2 and therefore the ratio of the balance revenue to the optimal Deveny yes at least 3 folds now we've analyzed the simple case of balance with exactly to advertisers I'm shown that the competitive ratio is 2 but what happens if there are more than two advertisers what happens if there are a large number of advertisers in the",
    "860-880": " case where there are large number of advertisers it's it can be shown that the competitive ratio of balance is given by this expression 1 minus 1 over e where e if the base of the natural logarithm is 2.718 so on and that is approximately 0.63 notice that this",
    "880-900": " competitive ratio 0.63 is strictly better than 1/2 which is the competitive ratio of the greedy algorithm so the balanced algorithm that's much better than the greedy algorithm in terms of competitive ratio now interestingly although I won't be able to show this in this lecture no online algorithm can",
    "900-920": " actually do better than this competitive ratio of 1 minus 1 by E for the AdWords problem but what I'm going to do instead is I'm going to show you the worst case example that gives us this competitive ratio of 1 minus 1 by E"
}