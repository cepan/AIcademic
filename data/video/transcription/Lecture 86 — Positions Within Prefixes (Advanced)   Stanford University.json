{
    "0-20": " we can do considerably more to limit our search for candidate matches the next step is to consider not only whether the prefixes of two strings have a symbol and assemble in common but whether the first common symbol appears close enough to the Front's of both strings the fact that no symbols before them are common to both strings will put a lower bound on the edit distance of the strings and",
    "20-40": " thus lower bound in turn will place a lower bound on the Jaccard distance between the strings when we use a two dimensional index based on both the symbol at a position and the position number itself we can cut down the total number of strings that become candidates for comparison with a given probe string roughly by a factor of two suppose we",
    "40-60": " have strings s and T and the first position of string s that matches a symbol in T is at position I moreover the symbol which we shall suppose is a matches the symbol of position J of T and the first thing we can conclude is",
    "60-80": " that s has i minus 1 symbols that do not appear in T and T has j minus 1 symbols that do not appear in s thus the edit distance between s and T is at least I plus J minus 2 while we have a lower",
    "80-100": " bound on the edit distance we can also see an upper bound on the length of the longest common subsequence in terms of the length L of string s that is the longest LCS we can have is when every symbol of s following the a also appears in T these symbols may not be consecutive and t but remember that",
    "100-120": " there is a unique order to the symbols and they appear in the same order and every string so if essence of length L then the longest possible LCS is of length L minus I plus 1 that is all but the I minus 1 symbols of s that precede the symbol a",
    "120-140": " now we can use the lower bound on edit distance in the upper bound on the length of the lower the longest common subsequence to figure out for each position I what positions of j the other string could be the first match remember we observed earlier that the Jaccard distance of two strings can be expressed",
    "140-160": " as e / e + c where e is the edit distance and sees the length of the LCS so if j is the upper limit on Jaccard distance we have e / e + c is less than or equal to j from the previous slide we",
    "160-180": " know that e is at least i plus j minus 2 and c is at most l minus i plus 1 where l is the length of the probe string s these two inequalities let us get a lower bound on e / e + C which using",
    "180-200": " this must be less than or equal to j that is if we hold see fixed and very e the e / e + c is minimized when e is as small as possible since c is not negative if we hold a fixed and very see then I / e + C is minimized when C is as",
    "200-220": " large as possible if we let EB as low as possible that is I plus J minus 2 and we let C be as large as possible l minus I plus 1 then we can treat these inequalities as equality's substitute I plus J minus 24 e and the inequality I /",
    "220-240": " e + c is equal to or less than J this and substitute C equals L minus I plus 1 in the same inequality and we get this messy formula trust me that's what you",
    "240-260": " get you can work it out yourself but there's more messy math our goal is to isolate Little J so we can multiply both sides of the inequality by l plus j minus 1 rearrange the terms and voila you get an upper limit on Little J the position of",
    "260-280": " the second string such that I and J are the first matching positions of the first string the right side of the inequality is a messy in the in the extreme but forgiving position I of the",
    "280-300": " first string everything is known we know the upper limit Capital J on the Jaccard distance and we know L the length of the first string so we can calculate the value of this formula to take advantage of the limit on on Little J that we",
    "300-320": " derived in the previous slide we're going to create a more complicated index structure where buckets correspond to pairs consisting of a single a symbol a and a position I to index string s we look at all the positions in its prefix",
    "320-340": " the definition of the prefix hasn't changed it's still the floor of j l plus 1 where j is the upper limit on the Jaccard distance and l is the length of",
    "340-360": " the string s we put string ass into the bucket AI for all positions I that are part of asses prefix where a is the symbol that s has in its eighth position incidentally we still recommend the bee tree in the indexed by Keys a i ordered",
    "360-380": " first by the symbol a and then by the position i but if they're there but there are many suitable forms of index structure and the important thing is that given a and i we can get to the bucket for a and i quickly to exploit our upper limit on the value of Little J we're going to make use of",
    "380-400": " the observation that given a probe string s we only need to find a candidate string T that might be within Jaccard distance capital j of string T one time we'll make sure we find T in the bucket for it the first symbol it has in common with s but we may not look 40 in buckets for later symbols that s",
    "400-420": " and T share even if those occurrences are both within the prefixes of their strings so going to visit the positions I've string asks from the left that is for i equals 1 to 3 and so on in that order and suppose we find a symbol a in",
    "420-440": " position I then we're going to look in certain buckets AJ to find candidate strings T to compare with string s when we decide which",
    "440-460": " buckets to look and we can assume that none of the earlier positions of s that is the positions less than I have matched anything in the candidates drink tea if this assumption is wrong than T is already a candidate so we don't need to worry about missing T for this value of position I that assumption lets us",
    "460-480": " use the upper bound on J that we derive two slides previous here's the pseudocode for how we find candidate matches for a probe string s first we do",
    "480-500": " a loop on the positions of I that are part of the prefix of s this loop is just like the simple form of look up we described earlier in particular this limits I to be only the positions in the prefix of the string s first thing we do",
    "500-520": " is determine the symbol a in the position I of extra gas we need that to limit the buckets research to only with the right symbol again that's just like the earlier look up what's new is the",
    "520-540": " inner loop on J the position of the target string that might match the eighth position of s notice that the loop limit is exactly the formula for the upper bound on J that we do we derived earlier",
    "540-560": " and for each value of J within its limit we look in the bucket for symbol a and position j any string there becomes a candidate for being within Jaccard distance capital j of string s okay so",
    "560-580": " let's take an example of a lookup will assume J the upper limit on your card distances is 0.2 and here's our probe string its length is 10 and how long is its prefix well jl is 0.2 times 10 or to",
    "580-600": " add one and take the floor and you get three that is the prefix is a de here's the upper bound on j the positions in the buckets in which we have to look for a given i since we know everything but I",
    "600-620": " we simplify the expression to this remember Jay has to be an integer so for I equals 1 we get three point eight minus one or two point eight divided by",
    "620-640": " 0.8 that's three and a half so j is equal to or less than three for i equals two we get 1 point 8 divided by 0.8 or",
    "640-660": " two and a quarter this jay jay has to be one or two and for i equals 3 we get 0.8 / 0.8 so only j equals one will do of course i can't be higher than three because the prefix of the probe string",
    "660-680": " is only three positions long but even if we were unaware of that would get a negative upper bound on J for I equals four or greater as a result suppose again that this is the probe string and consider i equals 1 the first symbol of the string is a and if you remember",
    "680-700": " the previous slide we determined that for I equals 1 we need to look at buckets for J up to 3 thus we need to look in these three buckets for possible matches at your card distance up to 0.2 for I equals to the upper limit Andre is too so we look at these two buckets and",
    "700-720": " finally for I equals 3 we look in the bucket e 1 because he is the third symbol of s and for I equals 3 the upper limit on J as one no other buckets have to be searched we want to convince",
    "720-740": " ourselves that when T is in none of these six buckets then it can't be at this than 0.2 or less from string s then the edit distance between S&T is at least three to see why consider what the first symbol t has in common with s can",
    "740-760": " be if it is an A then that a is at least four positions back in T because the we would search for and find T if a were any of the first three positions because we look at those buckets if a is at least he at least four positions back",
    "760-780": " and t then there are three symbols and T that precede a in the first symbol of s and therefore there must be at these three symbols of team must be deleted to convert T into s if the first symbol",
    "780-800": " that TNS share is d then it must be at least three positions back in T and therefore there are at least three symbols not shared by smt a namely a which is an S but not in T and the two symbols in positions 1 and 2 of T and similarly the FF s and T share ii but not a or d then e is at least two",
    "800-820": " symbols back and t and we can identify ad and the first symbol of e as symbols not share and of course if the first symbol of S&T shares after E then a D and E are not shared and the LCS of smt cannot be longer than 10",
    "820-840": " because that is the entire length of s therefore the Jaccard distance between S&T which is e / e + c is at least three 13th which is about 0.23 and surely greater than the minimum distance between S&T that we will accept which is 0.2 thus there is no reason why we",
    "840-860": " should compare s with any T that is not in one of the six buckets we actually do search"
}