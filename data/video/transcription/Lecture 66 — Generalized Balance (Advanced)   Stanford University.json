{
    "0-20": " let's say there are n advertisers A1 through a n and let's say each Advertiser has the same budget b and that b is greater than n there are going to be n * B queries that appear in N rounds of B queries each right so we're going to actually get one query at a time but we're going to group them into end rounds of B queries",
    "20-40": " each and here's how the bidding works with the queries that come in round one uh the biders are A1 through a n for the queries that appear in round two the biders are A2 through a n for the queries that appear in round I the",
    "40-60": " biders are AI through a n and so on until around then the queries that appear in round n the only bidder is uh is a n and remember there are B queries uh in each round and B is also equal to the budget of uh each Advertiser so the optimal algorithm in",
    "60-80": " this case uh is to assign the round ey queries to the I Advertiser that is uh assign um assign all the round one queries to uh A1 assign all the round two queries to A2 uh and so on so since",
    "80-100": " A1 has budget b all the round one queries uh all the B round one queries are assigned to A1 A2 has budget b all the round two queries are assigned to budget uh to to Advertiser A2 a AI has budget b all the b a round ey queries are assigned to Advertiser Ai and so on",
    "100-120": " um and since the optimal algorithm assigns the all the queries in round I to Advertiser I it is in fact able to assign each query to some Advertiser and so the revenue of the optimal algorithm is equal to the number of queries and that is n * B now let's see what the balance algorithm does in this case um now let's",
    "120-140": " just imagine that these empty rectangles represent the unspent budget of each of the advertisers A1 through a n and as we assign queries uh to the advertisers we're going to color these uh these rectangles when the round one uh queries come in um now uh it's easy to um you",
    "140-160": " know it's easy to see that the balance algorithm is going to assign an equal number of round one queries to each Advertiser A1 through a n now since there are um actually um B round one queries uh this means that each Advertiser is is allocated B byn of",
    "160-180": " the around one queries and and I've shown that with this blue coloring on the slide here now when the round two queries come in uh the round two queries the biders are advertisers A2 through a n A1 doesn't bid for the round uh two queries uh and and once again the balance",
    "180-200": " algorithm will assign an equal number of the round two queries to each of the eligible advertisers A2 through a n now the number of eligible advertisers in this case is not n but n minus one U and so the balance algorithm will end up assigning B by n minus one uh round one round two queries to each of the",
    "200-220": " advertisers A2 through a n now similarly when the round three queries come in the eligible advertisers are A3 through a n and the n min-2 of them and so the balance algorithm will end up assigning B by n minus 2 queries uh to each of the advertisers uh A3 through a",
    "220-240": " n so in general um after K rounds uh the allocation to Advertiser K is given by the formula shown here SK which is the allocation to Advertiser K uh is given by Sum uh 1 through k b / nus I + 1 okay",
    "240-260": " so the allocation to Advertiser I is B byn plus b by n minus1 plus b by n minus 2 and so on until B by nus I + 1 now this process can continue for a while uh but once once after a few rounds what's going to happen is that we",
    "260-280": " this sum this allocation is going to exhaust the budget of the a of the K Advertiser at some point SK is going to exceed B which is the total budget that's available to the K Advertiser and at that point you have exhausted the budget of not just the K Advertiser but",
    "280-300": " also all the advertisers uh k+1 k+2 and so on through n because all the all the advertisers k+ 1 through n uh have the same allocations so if you can find the smallest K such that FK is greater than or equal to B then after K rounds we've exhausted the budgets of all the the advertisers uh k k + 1 through n and so",
    "300-320": " we cannot assign any queries to any Advertiser beyond that point so our goal is to find the smallest SK such that SK is greater than b now let's just look at this simple graphic that shows the allocations of different advertisers the allocation to the first Advertiser S1 is",
    "320-340": " just B byn the allocation to the second Advertiser which is S2 is B byn plus b by n minus1 the allocation of the third Advertiser is the sum of the the first three terms and so on um the allocation of the K Advertiser is the sum of the first or the last K terms in the series B / n- K - 1 um all the way to B by n",
    "340-360": " and we want to find the the smallest K such that uh the the sum of this series or is greater than or equal to B now what we're going to do uh to simplify the problem is that we're going to divide by B throughout um and that's equivalent to saying that uh the",
    "360-380": " allocation to the first Advertiser is 1 by n the allocation of the second Advertiser is one one by n minus one and so on um and what we're interested in doing is that we're interested in finding uh the the the the the radex N such that the sum of the first K terms",
    "380-400": " is greater than or equal to one so we want to find the smallest K such that 1 by n + 1 by n minus 1 and so on through 1 by n- K - 1 is greater than or equal to 1 now there's a very famous result due to Oiler uh that says that that for a really large n the series 1 plus a",
    "400-420": " half plus plus 1/3 uh and so on uh sums to lwn n the natural logarithm of of n this is true to a small additive constant which we'll ignore okay now what we've said is that",
    "420-440": " the we want to uh find the smallest K such that the some of the last K terms of the series is equal to 1 if the sum of the last K terms of the series is 1 then the sum of the first n minus K terms of the series must be equal to lwn",
    "440-460": " n minus one since the sum of the whole series is equal to lwn n however if you just look at the first n minus K terms of the series uh they are 1 + half and so on through 1 by n minus K and using Oilers result once again the",
    "460-480": " sum of these terms can also be written as lwn of n minus K okay um so there's two ways to write the sum of the first n minus K terms of the series as lwn n minus K and and as",
    "480-500": " lwn nus1 and so it must be the case that l n minus1 is equal to lwn of n minus K and when I um solve that I can solve that for K and that gives me n divid n - K is equal to e or k is = to n * 1 - 1 /",
    "500-520": " e so we've uh in fact found the K such that after uh K rounds um we exhausted the budgets of all advertisers uh AK through a n and therefore we cannot assign any queries to any Advertiser so after the first K",
    "520-540": " Lo and K is n * 1 - 1 by E we cannot allocate any query to any Advertiser and so the allocation or the assignment or the revenue from the balance algorithm is given by B * uh n * 1 - 1 by E since in each round we have B",
    "540-560": " queries now we've also shown that the uh revenue of the optimal algorithm is n * B and therefore the competitive ratio of the balance algorithm is just a ratio of the revenues of the balance algorithm to that of the optimal algorithm and that's 1 - 1 / e so what we've shown here is an example",
    "560-580": " of a scenario where the balance algorithm has a competitive ratio of 1 - 1 / e the actual proof that the balance algorithm has this competitive ratio and can do no worse than 1 - 1 by E is outside the scope of this lecture and I encourage you to read the",
    "580-600": " uh the actual paper for that proof now we've looked at a very simplified version of the AdWords problem where all advertisers had the same budget b and all uh ads had the equal expected Revenue one now in the",
    "600-620": " general version of the problem this is not the case in the general version of the problem uh all each Advertiser has a different budget and all the bids each Advertiser has a different bid for each ad and each ad has a different expected clickthrough rate yielding a different expected Revenue now in in the general setting like this the balance algorithm",
    "620-640": " as I've described so far can actually be quite terrible let's look at an example Suppose there there's a query queue and there are two advertisers A1 and A2 and let's say a1's bid is one and let's say this is also the expected Revenue uh and an a1's budget is $110 a2s bid is 10 uh and let's say this",
    "640-660": " is also the expected revenue and the a2s budget is $100 now let's say we see 10 instances of the query q when the first instance of the of the query que comes in uh we'll notice that A1 and A2 are both eligible advertisers but you'll notice that a1's balance is much larger than A2",
    "660-680": " because a a1's budget is 110 and A2 budget is 100 and so we'll end up assigning uh the query to Advertiser A1 when the second query comes in uh a1's balance is going to be 109 a2s is going to be 100 so the second query is going to go to A1 as well and so on so in fact",
    "680-700": " we will assign all the first 10 instances of the query q to Advertiser A1 and therefore the revenue of the balance algorithm in this case is going to be $10 the optimal algorithm as is obvious in this case will assign um all the instances of query q to Advertiser A2",
    "700-720": " and will earn $100 and therefore the competitive ratio in this case is 10 / 100 which is 1 / 10 which is quite terrible so it turns out that we can fix the balance algorithm to deal with the fact that advertisers have different budgets and different bids and this is what's called the generalized balance algorithm",
    "720-740": " suppose for query q and bidder I um the uh the the the corresponding bid is Xi uh and the the budget of Advertiser um I is uh is bi okay um and let's say the amount spent so far by The Advertiser is MI now",
    "740-760": " the fraction of the advertiser Bud budget left over which you'll call Fi is 1/ by Mi or bi remember mi in this case is the uh is the amount that's been spent so far by The Advertiser bi is the advertiser I's total budget and therefore 1 - Mi by bi which is given by",
    "760-780": " fi is a fraction of advertisers I that's left over to be spent now we're going to Define this new term called s i of Q and SII of Q is given by this expression x i * 1 minus E raed to",
    "780-800": " fi and what we're going to do is when a query query q comes in we're going to take each eligible Advertiser I and we're going to compute this function s i of Q which is the product of the bid XI U and 1 - e to",
    "800-820": " fi and once we compute that uh we're going to allocate the query q to the bidder I with the largest value of SII of Q now uh I leave leave it as an exercise to you to uh show to yourself that in the case where all the bids are equal all XIs are equal to one and all the budgets are equal uh that is um all the",
    "820-840": " budgets bi are actually equal to a single uh budget b uh you know allocating queries uh using generalized balance uh with the largest value of s of Q is equivalent to allocating queries to The Advertiser with largest unspent",
    "840-860": " balance now the generalized balance algorithm works in the general uh setting when the bids and the budgets of each Advertiser are different and in fact it achieves the same competitive ratio 1 - 1 over e that the balance algorithm achieves in the simpler setting so in this lecture we've looked",
    "860-880": " at an algorithm called the balance algorithm um and and the generalized version of it called the generalized balance algorithm that that deals with the adver problem in the situation with limited budgets and offers a better competitive ratio than the gry algorithm thank you"
}