{
    "0-20": " usually we mind data that sits somewhere in a database or a distributed file system and we can access the same data repeatedly and it is all available to us whenever we need it but there are some applications where the data doesn't really live in a database or if it does the database is so large that we cannot query it fast",
    "20-40": " enough to answer questions about it examples include quick streams at a major internet site or observational data coming down from satellites answering queries about this sort of data requires clever approximation techniques and methods for compressing data in a way that allows us to answer the queries we need to answer we begin",
    "40-60": " with a brief summary of a stream management system the analog of a database management system the idea of sliding windows is an essential idea that tells lets us focus on on recent data and the streams I will then discuss a particular problem that of counting ones in the window of a bit stream is",
    "60-80": " the bits flyby the fundamental difference between a data stream and a data base is who controls how data enters the system in a database system the staff associated with the management of the database generally insert data into the system using a bulk loader or even explicit sequel insert commands the",
    "80-100": " staff can decide how much data to load into the system when and how fast in a streaming environment the management cannot control the rate of input for example the search queries that arrive at Google are generated by random people around the world at their pace Google staff have no control over the arrival",
    "100-120": " of queries they have to architect their system to deal with whatever data rate there is you might think a transaction processing system like Walmart recording all the purchases at all its cash registers everywhere as a stream and in a sense it is but Walmart has a large but fixed number of registers and",
    "120-140": " checkout clerks can press the keys just so fast so there's actually a pretty well-defined limit on how fast data arrives in such a system so let's see the elements of the datastream model of computation first we assume inputs of tuples just as in a database system although and many",
    "140-160": " algorithms we shall assume input elements are tuples of a very simple kind like bits or integers we assume there are one or more input ports at which data arrives generally we assume the arrival rate is high although we'll be a little vague about how high is high the important property of the arrival",
    "160-180": " rate is that it is fast enough that it is not feasible for the system to store all the arriving data and at the same time make it instantaneously available for any query we might want to perform on the data as a result the interesting algorithms for data stream dejar generally methods that use a limited",
    "180-200": " amount of storage perhaps only main memory and still enable us to answer important we're ease about the content of the stream streams can be queried in two modes the first is similar to the way we query a database system you ask a",
    "200-220": " query once and expect an answer about the state of the system at the time you ask the query for example what is the maximum value seen in the stream from its beginning to the exact time the query has asked this question can be answered by keeping a single value the maximum and updating it if necessary each time a new stream element derives",
    "220-240": " the other kind of query is called a standing query you write the query once and you expect the system to make the answer available at all times perhaps outputting a new value each time the answer changes for instance a standing query might ask for a report of",
    "240-260": " each stream element that is larger than any element seen so far in the stream we can answer this one by keeping one value of the maximum and each new element is compared with the max and if it is larger we do two things we output the value and we update the max to be that value",
    "260-280": " so here is a very simple outline of what a stream management system looks like okay first there is a processor which is the software that executes the queries the processor that could of course be a large number of processors working in",
    "280-300": " concert the processor may store some Standing queries and also allow ad hoc queries to be issued by the user here we see several streams entering the system",
    "300-320": " conventionally will assume that the element that the right end of the stream has arrived most recently and time goes backward to the left that is the further left the earlier the element entered the system the system makes outputs in",
    "320-340": " response to the standing queries and the ad-hoc queries now usually there is some archival storage this storage is so massive that it is not possible to do more than store the input streams we cannot assume the archival storage is architected like a database system we're by using appropriate indices or other tools one can answer queries efficiently",
    "340-360": " from that data we only know that if we had to reconstruct the history of the streams we could perhaps taking a long time to do so now there is a limited working storage which might be main memory flash storage or even disk but we assume it holds essential parts of the input streams in",
    "360-380": " a way that supports fast query we're going to list some examples of the sorts of streams that it could be useful to mine one example is the query stream and a search engine like Google for",
    "380-400": " example Google Trends wants to find out which search queries are much more frequent today than yesterday these queries represent issues of rising Public Interest answering such a standing query requires looking back at most two days in the query stream that's quite a lot perhaps billions of queries but it is tiny compared with the stream",
    "400-420": " of all Google queries ever issued click streams are another source a very rapid input a site like Yahoo has many millions of users each day and the average user probably clicks a dozen times or more a question worth answering is which URLs are getting clicked on a",
    "420-440": " lot more this past hour than normally interestingly while some of these events reflect breaking news stories many also represent a broken link when people can't get the page they want they often click on it several times before giving up so sites mined there click streams to detect broken links we can view a switch",
    "440-460": " in the middle of the Internet as processing streams one stream for each port the elements of the stream are IP packets typically and the switch can store a lot of information about packets including the response speed of different network links and the points",
    "460-480": " of origin and destination of the packets this information could be used to advise the switch and the best routing for a packet or to detect a denial of service attack now the concept of the sliding window is essential for many of the algorithms were going to discuss the simplest form",
    "480-500": " of window is defined by a fixed length and and consists of the most recent end elements received on a stream notice that each time a new element is received the oldest element falls out of the window a variation is to define the window as all the elements that have arrived within some time interval T",
    "500-520": " extending into the past say the last hour this sort of window has a storage requirement that is not fixed since the number of arrivals within time T can vary in comparison defining the window to hold a fixed number of elements lets us rely on needing storage space only up to a certain limit the interesting case",
    "520-540": " is when we're using a window consisting of the last and stream' elements but n is so large we cannot store n elements in main memory and well we have options to recruit increase the size of main memory use many compute nodes to handle one window or use this in some cases we",
    "540-560": " also need to consider the case where there are many streams perhaps millions of streams arriving at the same stream processor in that case n does not have to be very large before we cannot store all the windows in a way that allows us to get exact answers to queries about the contents of the windows so here's a",
    "560-580": " little picture of a stream and a window of length 6 initially the stream has arrived up to this point J the elements KL and so on will arrive in the future ok now k arise",
    "580-600": " the oldest element s is no longer part of the window which continues to hold exactly 6 elements as it always will now L arrives and D falls out of the window and Z arrives causing F to be dropped",
    "600-620": " from the window let's take a really simple example okay we have a stream of integers the window is of size n that is the window will hold the N most recent integers in the stream and we want the system to be able",
    "620-640": " to answer one standing query great what is the average of the elements in the window often we imagine that a stream extends infinitely into the past so we don't worry about what happens before there have been enough arrivals to fill the window however realistically we have to get started somehow so let's store the first",
    "640-660": " n inputs as they arrive and maintain the sum and count development seemed so far until the count reaches n then the average is the sum divided by the count at any point now suppose we have our window full and it consists of the most",
    "660-680": " recent two n elements we also store the average of these elements that averages in the local storage but it's not part of the window suppose a new element I arrives the oldest element J in the window will fall out of the window thus the change in the average is I minus J",
    "680-700": " all divided by n I over n accounts for the contribution I makes to the average and minus J over and accounts of the fact that J no longer it contributes to the average the important point is that in this manner we can answer the query what is the average of the elements in",
    "700-720": " the window doing only a small fixed number of arithmetic steps with each arrival on the stream that is far far better than having to compute the sum and average of all n elements in the window each time a new element arrives but not every query about the current value of the window can be answered in an equally convenient way"
}