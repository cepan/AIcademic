{
    "0-20": " the next method where we will look at in the module about analysis of large grass it's called trolling and this is another method that is very scalable and also very nicely uses the material that we have already learned in the class what's also nice about this method it that goes and detects very different types of clusters that we have talking about so",
    "20-40": " far so here is the idea what we want to do is we want to find let's say that we are given a big web graph we want to go find small communities in the web graph right so we have the graph where nodes are webpages and edges correspond to hyperlinks and the question is what is the signature of a community or a discussion in the web graph and thinking",
    "40-60": " about this idea that actually comes from the hubs and authorities we can think that the a signature of a discussion or a topic in the web graph is to have this bipartite or two layer structure well we can stick that we have a set of hubs on the on the left that point to a set of authorities on the right so the idea",
    "60-80": " would be that this pages the red nodes here on the Left they all point to a set of authority or content pages on the right so what we would want to find is we want to go and find in a big web graph we want to go identify dense two-layer graphs and the idea here is",
    "80-100": " that kind of a set of people talks about the same topic how do we formalize this problem a bit more clearly the idea is the following we want to go and enumerate complete bipartite sub graphs K s comma T so the idea is that I want",
    "100-120": " to find graphs where I have s nodes on the left and I have T nodes on the right to give you an example here it is I have a graph that I call K 3 comma 4 because I have three nodes on the left and these three nodes on the Left link to the four nodes on the right notice that every of",
    "120-140": " the on the nodes on the Left has four outgoing edges one to each other do node so it's a complete graph in a sense that all the edges are present every every guy on the Left links to all the nodes on the right and so the important point is that my graph is fully connected here s equals three because the size of the x equals",
    "140-160": " three and T equals four because I have four nodes on the right so our goal is to go and identify all the complete bipartite sub graphs with a given s in a given T now that we have specified the task let's think about the machinery we'll be using to solve it and kind of",
    "160-180": " surprisingly and interesting the machinery will be using comes from the frequent itemsets numeration so let me remind you first what is the frequent items at enumeration and then I'll show you how these algorithms actually find bipartite some graphs so what is the frequent itemsets we have to remember the Market Basket analysis where we think of ourselves having lots of Market",
    "180-200": " Basket data where we have up set of items you let's say that there is n of them this is basically a set of products we are selling in our supermarket and let's think that we have a set of baskets M where the idea is that every basket every kind of shopping cart is a subset of items we are selling right so",
    "200-220": " every every shopping cart every basket s s 1 2 s m it's a subset of all the items we are selling in our store then what our user also gives us it gives us the support threshold which is simply the frequency threshold F and our goal our task is to identify subsets of items T",
    "220-240": " this will this we will call frequent itemsets such that these are the sets of items that appear in at least s F of the baskets right so F is the support - hold we say that an item set t has a support threshold and f if it appears in at",
    "240-260": " least F market the baskets so in at least esse buy baskets that we have right now that we defined and refreshed what do we mean by frequent either set enumeration the next question is how do we connect the frequent itemsets with bipartite graph extraction the way we think about bipartite graph extraction",
    "260-280": " is the following what we will do is given a graph and for every node with create and a market basket so the idea is that for every node I define the basket as I simply buy as a set of nodes that know the I point store right so if I have an all die here then the basket I",
    "280-300": " create is let's call it s sub I contains the IDS of all the nodes that node I points to here they are right so I creates a market basket of items a B C and D and then what how can I think about complete bipartite sub graph K s comma T I simply think of it as a set Y",
    "300-320": " of size T that occurs in little s sets S sub I okay so saying this a bit more simply basically what it means is that what we are doing is we are looking for bipartite graphs it simply means that we are looking for a frequency threshold set to s and look at the layer",
    "320-340": " keetchadam the right-hand side for all sets of that given size right so if I have a bipartite graph let's say in this case I have K 3 comma 4 then the idea is that I want to find frequent itemsets of size 4 right this is four that have",
    "340-360": " minimum support threshold at least s which is three in this case right because this means that I have I have three nodes on the left that all point to know the four nodes on the right so the Y the size of the right hand side is simply the item set size and the size of",
    "360-380": " the left hand side is the support of that given set of items to give you a bit more animated example for every node I create an item set simply as a set of nodes at that node I points to then I set the minimum support which is s this",
    "380-400": " will be the size of the left-hand side and let P be the size of the item set that I find so now if I found a particular item set that I call it frequent that has let's say entries a B and C this basically means that there are there are at least three",
    "400-420": " right because minimum support threshold in this case equals three there are at least three other nodes in the network that all point to my set of nodes a B and C what in turn means that we have now discovered the bipartite sub graph K 3 comma 3 where nodes x y&z point to",
    "420-440": " nodes a B and C so in the same in the sense we have found exactly what we wanted we found a complete bipartite sub graph another example think that I'm given this graph here on the top left corner from this graph I generate a set of item sets basically the idea is that",
    "440-460": " for every node I simply ask what are the nodes this node points to so now the a points to B D and C so I have the item set A to B B C and D for example node F doesn't point to any other node in the network so no death has no is empty while for example node B only points to",
    "460-480": " D so here is no D now imagine that I go in and say that I want to find all the frequent itemsets with support threshold equal to if I do this using let's say D at a priori algorithm on the set I find that B D has support 3 and I I find that item set s has EF has support 2 which",
    "480-500": " means now that we have found actually to bipartite sub graphs right the the I found the set BD that has support 3 which means that there are three nodes a C and E that point to both B and E which is the sub graph that I find here and then the second bipartite sub graph we",
    "500-520": " have extracted has the nodes en F here they are it has support threshold to support 2 which basically means that there are two other nodes in this case C and E C and D from here that both point to en F so this is basically the way how this method works and how it basically",
    "520-540": " allows us to extract bipartite subjects what is an important point here is that this bipartite bipartite sub graphs have to be fully connected which means all the nodes on the Left have to to all the notes or to every node on the right"
}